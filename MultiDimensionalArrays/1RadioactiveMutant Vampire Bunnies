//Browsing through GitHub, you come across an old JS Basics teamwork game.It is about very nasty bunnies that multiply extremely fast.There’s also a player that has to escape from their lair.You really like the game, so you decide to port it to C# because that’s your language of choice. The last thing that is left is the algorithm that decides if the player will escape the lair or not.
//First, you will receive a line holding integers N and M, which represent the rows and columns in the lair. Then you receive N strings that can only consist of “.”, “B”, “P”. The bunnies are marked with “B”, the player is marked with “P”, and everything else is free space, marked with a dot “.”. They represent the initial state of the lair. There will be only one player. Then you will receive a string with commands such as LLRRUUDD – where each letter represents the next move of the player (Left, Right, Up, Down).
//After each step of the player, each of the bunnies spread to the up, down, left and right (neighboring cells marked as “.” changes their value to B). If the player moves to a bunny cell or a bunny reaches the player, the player has died.If the player goes out of the lair without encountering a bunny, the player has won.
//When the player dies or wins, the game ends.All the activities for this turn continue (e.g.all the bunnies spread normally), but there are no more turns.There will be no stalemates where the moves of the player end before he dies or escapes.
//Finally, print the final state of the lair with every row on a separate line. On the last line, print either “dead: { row} {col}” or “won: {row} {col}”. Row and col are the coordinates of the cell where the player has died or the last cell he has been in before escaping the lair.

using System;
using System.Linq;

namespace Radioactive_Mutant_V._Bunnies
{
    class Program
    {
        static void Main()
        {
            int[] matrixSize = Console.ReadLine().Split().Select(int.Parse).ToArray();
            char[,] lair = new char[matrixSize[0], matrixSize[1]];
            int[] playerStartCoord = new int[2];
            for (int i = 0; i < matrixSize[0]; i++)
            {
                string row = Console.ReadLine();
                for (int j = 0; j < matrixSize[1]; j++)
                {
                    if (row[j] == 'P')
                    {
                        playerStartCoord[0] = i;
                        playerStartCoord[1] = j;
                        lair[i, j] = '.';
                    }
                    else lair[i, j] = row[j];
                }
            }
            string commands = Console.ReadLine();
            int currentXpos = playerStartCoord[1];
            int currentYpos = playerStartCoord[0];
            bool dead = false;
            foreach (var command in commands)
            {
                switch (command)
                {
                    case 'U':
                        currentYpos--;
                        break;
                    case 'D':
                        currentYpos++;
                        break;
                    case 'L':
                        currentXpos--;
                        break;
                    case 'R':
                        currentXpos++;
                        break;
                }
                if (CheckForEscaping(currentXpos, currentYpos, lair))
                {
                    if (currentXpos < 0) currentXpos = 0;
                    if (currentXpos == lair.GetLength(1)) currentXpos--;
                    if (currentYpos < 0) currentYpos = 0;
                    if (currentYpos == lair.GetLength(0)) currentYpos--;
                    BunniesSpread(lair);
                    break;
                }
                BunniesSpread(lair);
                if (CheckForBunniesReachPlayer(currentXpos, currentYpos, lair))
                {
                    dead = true;
                    break;
                }
            }
            PrintMatrix(lair);
            if (dead) Console.WriteLine($"dead: {currentYpos} {currentXpos}");
            else Console.WriteLine($"won: {currentYpos} {currentXpos}");
        }

        static bool CheckForEscaping(int Xpos, int Ypos, char[,] matrix)
        {
            if (Xpos < 0 || Xpos >= matrix.GetLength(1) || Ypos < 0 || Ypos >= matrix.GetLength(0)) return true;
            return false;
        }

        static void BunniesSpread(char[,] matrix)
        {
            for (int i = 0; i < matrix.GetLength(0); i++)
            {
                for (int j = 0; j < matrix.GetLength(1); j++)
                {
                    if (matrix[i, j] == 'B')
                    {
                        if (!CheckForEscaping(j - 1, i, matrix) && matrix[i, j - 1] == '.') matrix[i, j - 1] = 'N';
                        if (!CheckForEscaping(j + 1, i, matrix) && matrix[i, j + 1] == '.') matrix[i, j + 1] = 'N';
                        if (!CheckForEscaping(j, i + 1, matrix) && matrix[i + 1, j] == '.') matrix[i + 1, j] = 'N';
                        if (!CheckForEscaping(j, i - 1, matrix) && matrix[i - 1, j] == '.') matrix[i - 1, j] = 'N';
                    }
                }
            }
            for (int i = 0; i < matrix.GetLength(0); i++)
            {
                for (int j = 0; j < matrix.GetLength(1); j++)
                {
                    if (matrix[i, j] == 'N') matrix[i, j] = 'B';
                }
            }
        }

        static bool CheckForBunniesReachPlayer(int Xpos, int Ypos, char[,] matrix)
        {
            if (matrix[Ypos, Xpos] == 'B') return true;
            else return false;
        }

        static void PrintMatrix(char[,] matrix)
        {
            for (int row = 0; row < matrix.GetLength(0); row++)
            {
                for (int col = 0; col < matrix.GetLength(1); col++)
                {
                    Console.Write(matrix[row, col]);
                }
                Console.WriteLine();
            }
        }
    }
}
