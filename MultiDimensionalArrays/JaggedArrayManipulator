//Create a program that populates, analyzes and manipulates the elements of a matrix with unequal length of its rows.
//First you will receive an integer N equal to the number of rows in your matrix.
//On the next N lines, you will receive sequences of integers, separated by a single space.Each sequence is a row in the matrix.
//After populating the matrix, start analyzing it.If a row and the one below it have equal length, multiply each element in both of them by 2, otherwise - divide by 2.
//Then, you will receive commands. There are three possible commands:
//"Add {row} {column} {value}" - add { value}
//to the element at the given indexes, if they are valid
//"Subtract {row} {column} {value}" - subtract {value} from the element at the given indexes, if they are valid
//"End" - print the final state of the matrix(all elements separated by a single space) and stop the program

using System;

namespace JaggedArrayManipulator
{
	class Program
	{
		static void Main(string[] args)
		{
			int n = int.Parse(Console.ReadLine());

			double[][] jagged = new double[n][];

			//populating the matrix
			for (int row = 0; row < jagged.Length; row++)
			{
				string[] inputNumbers = Console.ReadLine().Split(' ');

				jagged[row] = new double[inputNumbers.Length];

				for (int col = 0; col < jagged[row].Length; col++)
				{
					jagged[row][col] = double.Parse(inputNumbers[col]);
				}
			}

			//analyzing the matrix

			for (int i = 0; i < n - 1; i++)
			{

				if (jagged[i].Length == jagged[i + 1].Length)
				{
					for (int j = 0; j < jagged[i].Length; j++)
					{
						jagged[i][j] *= 2;
						jagged[i + 1][j] *= 2;
					}
				}
				else
				{
					for (int j = 0; j < jagged[i].Length; j++)
					{
						jagged[i][j] /= 2;

					}
					for (int k = 0; k < jagged[i + 1].Length; k++)
					{
						jagged[i + 1][k] /= 2;
					}
				}
			}
			string command = "";

			while (true)
			{
				command = Console.ReadLine();
				string[] details = command.Split();

				if (details[0] == "Add" && details.Length == 4)
				{
					int row = int.Parse(details[1]);
					int col = int.Parse(details[2]);
					double value = double.Parse(details[3]);


					if (row >= 0 && row < n
						&& col >= 0 && col < jagged[row].Length)
					{
						jagged[row][col] += value;
					}

				}
				else if (details[0] == "Subtract" && details.Length == 4)
				{
					int row = int.Parse(details[1]);
					int col = int.Parse(details[2]);
					double value = double.Parse(details[3]);


					if (row >= 0 && row < n
						&& col >= 0 && col < jagged[row].Length)
					{
						jagged[row][col] -= value;
					}
				}
				else if (details[0] == "End")
				{
					foreach (double[] row in jagged)
					{
						Console.WriteLine(string.Join(" ", row));

					}
					break;
				}
			}

		}
	}
}
