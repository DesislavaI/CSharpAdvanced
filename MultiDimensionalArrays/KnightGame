//Chess is the oldest game, but it is still popular these days.For this task we will use only one chess piece – the Knight. 
//The knight moves to the nearest square but not on the same row, column, or diagonal. (This can be thought of as moving two squares horizontally, then one square vertically, or moving one square horizontally then two squares vertically— i.e. in an "L" pattern.)
//The knight game is played on a board with dimensions N x N and a lot of chess knights 0 <= K <= N2.
//You will receive a board with K for knights and '0' for empty cells.Your task is to remove a minimum of the knights, so there will be no knights left that can attack another knight. 

using System;

namespace KnightGame
{
	class Program
	{
		static void Main(string[] args)
		{
			int size = int.Parse(Console.ReadLine());

			char[,] board = new char[size, size];

			for (int row = 0; row < size; row++)
			{
				char[] inputRow = Console.ReadLine().ToCharArray();
				for (int col = 0; col < size; col++)
				{
					board[row, col] = inputRow[col];
				}
			}

			int counter = 0;
			while (true)
			{
				int maxCount = 0;
				int knightRow = 0;
				int knightCol = 0;

				for (int row = 0; row < board.GetLength(0); row++)
				{
					for (int col = 0; col < board.GetLength(1); col++)
					{
						int currentCount = 0;
						if (board[row, col] == 'K')
						{
							if (IsInside(board, row - 2, col + 1)
								&& board[row - 2, col + 1] == 'K')
							{
								currentCount++;
							}
							if (IsInside(board, row - 2, col - 1)
								&& board[row - 2, col - 1] == 'K')
							{
								currentCount++;
							}
							if (IsInside(board, row + 2, col + 1)
								&& board[row + 2, col + 1] == 'K')
							{
								currentCount++;
							}
							if (IsInside(board, row + 2, col - 1)
								&& board[row + 2, col - 1] == 'K')
							{
								currentCount++;
							}

							if (IsInside(board, row - 1, col + 2)
								&& board[row - 1, col + 2] == 'K')
							{
								currentCount++;
							}
							if (IsInside(board, row - 1, col - 2)
								&& board[row - 1, col - 2] == 'K')
							{
								currentCount++;
							}
							if (IsInside(board, row + 1, col + 2)
								&& board[row + 1, col + 2] == 'K')
							{
								currentCount++;
							}
							if (IsInside(board, row + 1, col - 2)
								&& board[row + 1, col - 2] == 'K')
							{
								currentCount++;
							}
						}
						if (currentCount > maxCount)
						{
							maxCount = currentCount;
							knightRow = row;
							knightCol = col;
						}
					}
				}
				if (maxCount == 0)
				{
					break;
				}
				board[knightRow, knightCol] = 'O';
				counter++;

			}
			Console.WriteLine(counter);
		}
		private static bool IsInside(char[,] board, int desiredRow, int desiredCol)
		{
			return desiredRow < board.GetLength(0) && desiredRow >= 0 &&
				desiredCol < board.GetLength(1) && desiredCol >= 0;
		}
	}
}



