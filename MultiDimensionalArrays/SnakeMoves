//You are walking in the park and you encounter a snake! 
//You are terrified, and you start running zig-zag, so the snake starts following you.
//You have a task to visualize the snake’s path in a square form.
//A snake is represented by a string. The isle is a rectangular matrix of size NxM. 
//A snake starts going down from the top-left corner and slithers its way down.
//The first cell is filled with the first symbol of the snake, 
//the second cell is filled with the second symbol, etc.
//The snake is as long as it takes in order to fill the stairs completely – 
//if you reach the end of the string representing the snake, start again at the beginning.
//After you fill the matrix with the snake’s path, you should print it.

using System;
using System.Linq;

namespace SnakeMoves
{
	class Program
	{
		static void Main(string[] args)
		{
			int[] matrixSize = Console.ReadLine()
				.Split(' ', StringSplitOptions.RemoveEmptyEntries)
				.Select(int.Parse)
				.ToArray();

			int rows = matrixSize[0];
			int cols = matrixSize[1];

			char[,] matrix = new char[matrixSize[0], matrixSize[1]];

			string snake = Console.ReadLine();

			int counter = 0;

			for (int row = 0; row < matrix.GetLength(0); row++)
			{
				if (row % 2 == 0)
				{
					for (int col = 0; col < matrix.GetLength(1); col++)
					{

						if (counter >= snake.Length)
						{
							counter = 0;
						}

						matrix[row, col] = snake[counter++];
					}
				}
				else if (row % 2 != 0)
				{
					for (int col = matrix.GetLength(1) - 1; col >= 0; col--)
					{
						if (counter >= snake.Length)
						{
							counter = 0;
						}
						matrix[row, col] = snake[counter++];
					}
				}


			}

				for (int row = 0; row < matrix.GetLength(0); row++)
				{
					for (int col = 0; col < matrix.GetLength(1); col++)
					{
						Console.Write(matrix[row, col]);
					}
					Console.WriteLine();
				}

			}
		}
	}

