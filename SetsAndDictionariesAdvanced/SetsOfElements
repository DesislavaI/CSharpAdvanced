//Write a program that prints a set of elements.On the first line you will receive two numbers - n and m, which represent the lengths of two separate sets.On the next n + m lines you will receive n numbers, which are the numbers in the first set, and m numbers, which are in the second set.Find all the unique elements that appear in both of them and print them in the order in which they appear in the first set - n.
//For example:
//Set with length n = 4: { 1, 3, 5, 7}
//Set with length m = 3: {3, 4, 5}
//Set that contains all the elements that repeat in both sets -> {3, 5}

using System;
using System.Collections.Generic;
using System.Linq;

namespace _2.SetsOfElements
{
	class Program
	{
		static void Main(string[] args)
		{
			int[] input = Console.ReadLine()
				.Split(" ", StringSplitOptions.RemoveEmptyEntries)
				.Select(int.Parse)
				.ToArray();

			HashSet<int> nElements = new HashSet<int>();
			HashSet<int> mElements = new HashSet<int>();
			int currentNumber = 0;


			for (int i = 0; i < input[0]; i++)
			{
				currentNumber = int.Parse(Console.ReadLine());
				nElements.Add(currentNumber);
			}
			for (int i = 0; i < input[1]; i++)
			{
				currentNumber = int.Parse(Console.ReadLine());
				mElements.Add(currentNumber);
			}
			foreach (var item in nElements)
			{
				if (mElements.Contains(item))
				{
					Console.Write(item + " ");
				}
			}
			Console.WriteLine();
		}
	}
}
